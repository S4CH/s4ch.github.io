<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Blogs on CyFun</title><link>https://s4ch.github.io/blog/</link><description>Recent content in Blogs on CyFun</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 15 Sep 2024 06:30:05 +0000</lastBuildDate><atom:link href="https://s4ch.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Novel approach to tackle UAF Bugs in the Linux Kernel</title><link>https://s4ch.github.io/blog/bucket-allocators/</link><pubDate>Sun, 15 Sep 2024 06:30:05 +0000</pubDate><guid>https://s4ch.github.io/blog/bucket-allocators/</guid><description>&lt;p>Hi, kernel and sec enthusiasts! It&amp;rsquo;s been a while since my last post(2022), but I&amp;rsquo;ve got something juicy for you today. We are going to dive into an exciting new proposal that aims to bolster the Linux kernel&amp;rsquo;s defenses against those persistent use-after-free (UAF) vulnerabilities. Grab your favorite beverage or drink(Try Amul Kool once, Thank me later), because we&amp;rsquo;re about to get our hands dirty with some kernel internals!&lt;/p>
&lt;h2 id="the-persistent-threat-of-uaf-vulnerabilities">The Persistent Threat of UAF Vulnerabilities&lt;/h2>
&lt;p>If you&amp;rsquo;ve been in the low-level security for a while, you&amp;rsquo;re probably sick of hearing about UAF vulnerabilities. But for those who need a refresher, UAFs occur when a program continues to use a pointer to memory after it&amp;rsquo;s been freed. This can lead to all sorts of fun exploitation scenarios, especially in kernel-land where the stakes are highest.&lt;/p></description></item></channel></rss>