"use strict";(self.webpackChunkcyfun_me=self.webpackChunkcyfun_me||[]).push([[9157],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,g=m["".concat(s,".").concat(u)]||m[u]||c[u]||o;return n?a.createElement(g,l(l({ref:t},d),{},{components:n})):a.createElement(g,l({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[m]="string"==typeof e?e:i,l[1]=r;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},93933:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const o={},l="CC: Steganography",r={unversionedId:"Tryhackme/CC Steganography/CC Steganography",id:"Tryhackme/CC Steganography/CC Steganography",title:"CC: Steganography",description:"A crash course on the topic of steganography",source:"@site/writeups/Tryhackme/CC Steganography/CC Steganography.md",sourceDirName:"Tryhackme/CC Steganography",slug:"/Tryhackme/CC Steganography/",permalink:"/writeups/Tryhackme/CC Steganography/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"c4ptur3-th3-fl4g",permalink:"/writeups/Tryhackme/C4ptur3-th3-fl4g/c4ptur3 th3 fl4g"},next:{title:"CMesS",permalink:"/writeups/Tryhackme/CMesS/"}},s={},p=[{value:"\ud83d\udca2 We will cover  the topics",id:"-we-will-cover--the-topics",level:2},{value:"Steghide",id:"steghide",level:2},{value:"zsteg",id:"zsteg",level:2},{value:"Exiftool",id:"exiftool",level:2},{value:"Stegoveritas",id:"stegoveritas",level:2},{value:"Spectrograms",id:"spectrograms",level:2},{value:"The Final Exam",id:"the-final-exam",level:2}],d={toc:p},m="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"cc-steganography"},"CC: Steganography"),(0,i.kt)("p",null,"A crash course on the topic of steganography"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://tryhackme.com/room/ccstego"},"CC: Steganography")),(0,i.kt)("h2",{id:"-we-will-cover--the-topics"},"\ud83d\udca2 We will cover  the topics"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Steganography")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"steghide"},"Steghide"),(0,i.kt)("p",null,"Steghide is one of the most famous steganography tools, and for good reason. It's a classic method, hiding a message inside an image, and steghide does it effectively and efficiently. A downside of steghide is that it only works on jpgs; however, that means that if you believe there is a hidden message inside a jpg, then steghide is a probable option."),(0,i.kt)("p",null,"One of the greatest benefits of stegohide, is that it can encrypt data with a passphrase. Meaning that if they don't have the password then they can't extract any data."),(0,i.kt)("p",null,"steghide can be installed with the command ",(0,i.kt)("inlineCode",{parentName:"p"},"sudo apt install steghide")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"steghide version 0.5.1\n\nthe first argument must be one of the following:\n embed, --embed          embed data\n extract, --extract      extract data\n info, --info            display information about a cover- or stego-file\n   info <filename>       display information about <filename>\n encinfo, --encinfo      display a list of supported encryption algorithms\n version, --version      display version information\n license, --license      display steghide's license\n help, --help            display this usage information\n\nembedding options:\n -ef, --embedfile        select file to be embedded\n   -ef <filename>        embed the file <filename>\n -cf, --coverfile        select cover-file\n   -cf <filename>        embed into the file <filename>\n -p, --passphrase        specify passphrase\n   -p <passphrase>       use <passphrase> to embed data\n -sf, --stegofile        select stego file\n   -sf <filename>        write result to <filename> instead of cover-file\n -e, --encryption        select encryption parameters\n   -e <a>[<m>]|<m>[<a>]  specify an encryption algorithm and/or mode\n   -e none               do not encrypt data before embedding\n -z, --compress          compress data before embedding (default)\n   -z <l>                 using level <l> (1 best speed...9 best compression)\n -Z, --dontcompress      do not compress data before embedding\n -K, --nochecksum        do not embed crc32 checksum of embedded data\n -N, --dontembedname     do not embed the name of the original file\n -f, --force             overwrite existing files\n -q, --quiet             suppress information messages\n -v, --verbose           display detailed information\n\nextracting options:\n -sf, --stegofile        select stego file\n   -sf <filename>        extract data from <filename>\n -p, --passphrase        specify passphrase\n   -p <passphrase>       use <passphrase> to extract data\n -xf, --extractfile      select file name for extracted data\n   -xf <filename>        write the extracted data to <filename>\n -f, --force             overwrite existing files\n -q, --quiet             suppress information messages\n -v, --verbose           display detailed information\n\noptions for the info command:\n -p, --passphrase        specify passphrase\n   -p <passphrase>       use <passphrase> to get info about embedded data\n\nTo embed emb.txt in cvr.jpg: steghide embed -cf cvr.jpg -ef emb.txt\nTo extract embedded data from stg.jpg: steghide extract -sf stg.jpg\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"What argument allows you to embed data(such as files) into other files?")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"embed, --embed embed data")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"embed")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"What flag let's you set the file to embed?")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"-ef, --embedfile select file to be embedded")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"-ef")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},'What flag allows you to set the "cover file"?(i.e the jpg)')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"-cf, --coverfile select cover-file")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"-cf")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"How do you set the password to use for the cover file?")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"-p, --passphrase specify passphrase")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"-p")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"What argument allows you to extract data from files?")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"extract, --extract extract data")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"extract")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"How do you select the file that you want to extract data from?")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"-sf, --stegofile select stego file")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"-sf")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},'Given the passphrase "password123", what is the hidden message in the included "jpeg1" file.')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'steghide extract -sf spect/jpeg1.jpeg -p "password123"\nwrote extracted data to "a.txt".\n\ncat a.txt\npinguftw\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"pinguftw")),(0,i.kt)("h2",{id:"zsteg"},"zsteg"),(0,i.kt)("p",null,"zsteg is to png's what steghide is to jpg's. It supports various techniques to extract any and all data from png files."),(0,i.kt)("p",null,"Note: zsteg also supports BMP files, but it is primarily used for png's."),(0,i.kt)("p",null,"zsteg can be installed by using ruby with the command ",(0,i.kt)("inlineCode",{parentName:"p"},"gem install zsteg")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Usage: zsteg [options] filename.png [param_string]\n\n    -c, --channels X                 channels (R/G/B/A) or any combination, comma separated\n                                     valid values: r,g,b,a,rg,bgr,rgba,r3g2b3,...\n    -l, --limit N                    limit bytes checked, 0 = no limit (default: 256)\n    -b, --bits N                     number of bits, single int value or '1,3,5' or range '1-8'\n                                     advanced: specify individual bits like '00001110' or '0x88'\n        --lsb                        least significant BIT comes first\n        --msb                        most significant BIT comes first\n    -P, --prime                      analyze/extract only prime bytes/pixels\n        --invert                     invert bits (XOR 0xff)\n    -a, --all                        try all known methods\n    -o, --order X                    pixel iteration order (default: 'auto')\n                                     valid values: ALL,xy,yx,XY,YX,xY,Xy,bY,...\n    -E, --extract NAME               extract specified payload, NAME is like '1b,rgb,lsb'\n\n        --[no-]file                  use 'file' command to detect data type (default: YES)\n        --no-strings                 disable ASCII strings finding (default: enabled)\n    -s, --strings X                  ASCII strings find mode: first, all, longest, none\n                                     (default: first)\n    -n, --min-str-len X              minimum string length (default: 8)\n        --shift N                    prepend N zero bits\n\n    -v, --verbose                    Run verbosely (can be used multiple times)\n    -q, --quiet                      Silent any warnings (can be used multiple times)\n    -C, --[no-]color                 Force (or disable) color output (default: auto)\n\nPARAMS SHORTCUT\n        zsteg fname.png 2b,b,lsb,xy  ==>  --bits 2 --channel b --lsb --order xy\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"How do you specify that the least significant bit comes first")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"--lsb least significant BIT comes first")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"--lsb")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"What about the most significant bit?")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"--msb most significant BIT comes first")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"--msb")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"How do you specify verbose mode?")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"-v, --verbose Run verbosely (can be used multiple times)")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"-v")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"How do you extract the data from a specific payload?")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"-E, --extract NAME extract specified payload, NAME is like '1b,rgb,lsb'")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"-E")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},'In the included file "png1" what is the hidden message?')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"-s, --strings X ASCII strings find mode: first, all, longest, none (default: first)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'steg spect/png1.png -s all\nimagedata           .. file: DOS 2.0 backup id file, sequence 48\nb1,r,lsb,xy         .. file: dBase III DBT, version number 0, next free block index 3234843654\nb1,bgr,lsb,xy       .. text: "nootnoot$"\nb2,r,lsb,xy         .. file: MacBinary, Mon Feb  6 07:28:16 2040 INVALID date, modified Mon Feb  6 07:28:16 2040 "PPPUP"\nb2,b,msb,xy         .. text: "]UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU"\nb4,r,lsb,xy         .. text: "DETUDUDUDUUUDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD"\nb4,r,msb,xy         .. text: ["\\"" repeated 243 times]\nb4,g,lsb,xy         .. text: "\\"\\"#33223#2#2#33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"\nb4,b,lsb,xy         .. textnb4,b,msb,xy         .. text: ["D" repeated 243 times]\nb4,rgb,lsb,xy       .. text: "\\"B$\\"B5\\"R43S%2C43S5#C4#S%2B43S5#R53S%#B$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C$2C"\nb4,bgr,lsb,xy       .. text: "$\\"B$2B%2S4#R53C43S%3C$#R52C43S%2S5#S%\\"B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#B4#"\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"nootnoot$")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"What about the payload used to encrypt it.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"b1,bgr,lsb,xy")),(0,i.kt)("h2",{id:"exiftool"},"Exiftool"),(0,i.kt)("p",null,"Exiftool is a tool that allows you to view and edit image metadata. While this in itself is not a stego tool, I would be remiss not to include at least a footnote on it as one of the most popular forms of image stego is to hide messages in the metadata."),(0,i.kt)("p",null,"Exiftool can be installed with ",(0,i.kt)("inlineCode",{parentName:"p"},"sudo apt install exiftool")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"In the included jpeg3 file, what is the document name")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"exiftool spect/jpeg3.jpeg\nExifTool Version Number         : 12.05\nFile Name                       : jpeg3.jpeg\nDirectory                       : spect\nFile Size                       : 8.3 kB\nFile Modification Date/Time     : 2020:01:06 22:09:44+01:00\nFile Access Date/Time           : 2020:09:27 15:00:52+02:00\nFile Inode Change Date/Time     : 2020:09:27 15:00:44+02:00\nFile Permissions                : rw-r--r--\nFile Type                       : JPEG\nFile Type Extension             : jpg\nMIME Type                       : image/jpeg\nJFIF Version                    : 1.01\nExif Byte Order                 : Big-endian (Motorola, MM)\nDocument Name                   : Hello :)\nX Resolution                    : 1\nY Resolution                    : 1\nResolution Unit                 : None\nY Cb Cr Positioning             : Centered\nImage Width                     : 213\nImage Height                    : 160\nEncoding Process                : Baseline DCT, Huffman coding\nBits Per Sample                 : 8\nColor Components                : 3\nY Cb Cr Sub Sampling            : YCbCr4:2:0 (2 2)\nImage Size                      : 213x160\nMegapixels                      : 0.034\n")),(0,i.kt)("h2",{id:"stegoveritas"},"Stegoveritas"),(0,i.kt)("p",null,"Personally this is one of my favorite image stego tools. It supports just about every image file, and is able to extract all types of data from it. It is an incredibly useful tool if you don't know exactly what you're looking for, as it has a myriad of built in tests to extract any and all data."),(0,i.kt)("p",null,"Note: Stegoveritas has other features as well such as color correcting images"),(0,i.kt)("p",null,"Stegoveritas can be installed by running these two commands:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pip3 install stegoveritas")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stegoveritas_install_deps"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"usage: stegoveritas [-h] [-out dir] [-debug] [-password PASSWORD] [-wordlist WORDLIST] [-meta] [-imageTransform] [-bruteLSB] [-colorMap [N [N ...]]] [-colorMapRange Start End] [-extractLSB]\n                    [-red index [index ...]] [-green index [index ...]] [-blue index [index ...]] [-alpha index [index ...]] [-extract_frames] [-trailing] [-steghide] [-exif] [-xmp]\n                    [-carve]\n                    file\n\nYet another Stego tool\n\npositional arguments:\n  file                  The file to analyze\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -out dir              Directory to place output in. Defaults to ./results\n  -debug                Enable debugging logging.\n  -password PASSWORD    When applicable, attempt to use this password to extract data.\n  -wordlist WORDLIST    When applicable, attempt to brute force with this wordlist.\n\nimage options:\n  -meta                 Check file for metadata information\n  -imageTransform       Perform various image transformations on the input image and save them to the output directory\n  -bruteLSB             Attempt to brute force any LSB related stegonography.\n  -colorMap [N [N ...]]\n                        Analyze a color map. Optional arguments are colormap indexes to save while searching\n  -colorMapRange Start End\n                        Analyze a color map. Same as colorMap but implies a range of colorMap values to keep\n  -extractLSB           Extract a specific LSB RGB from the image. Use with -red, -green, -blue, and -alpha\n  -red index [index ...]\n  -green index [index ...]\n  -blue index [index ...]\n  -alpha index [index ...]\n  -extract_frames       Split up an animated gif into individual frames.\n  -trailing             Check for trailing data on the given file\n  -steghide             Check for StegHide hidden info.\n\nmulti options:\n  -exif                 Check this file for exif information.\n  -xmp                  Check this file for XMP information.\n  -carve                Attempt to carve/extract things from this file.\n\nHave a good example? Wish it did something more? Submit a ticket: https://github.com/bannsec/stegoVeritas\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"How do you check the file for metadata?")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"-meta Check file for metadata information")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"-meta")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"How do you check for steghide hidden information")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"-steghide Check for StegHide hidden info.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"-steghide")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"What flag allows you to extract LSB data from the image?")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"-extractLSB Extract a specific LSB RGB from the image. Use with -red, -green, -blue, and -alpha")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"-extractLSB")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"In the included image jpeg2 what is the hidden message?")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cat results/steghide_5e3b4b8fc262e154cb349f94e58c3026.bin\nkekekekek\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"kekekekek")),(0,i.kt)("h2",{id:"spectrograms"},"Spectrograms"),(0,i.kt)("p",null,"Spectrogram stegonography is the art of hiding hidden an image inside in an audio file's spectogram. Therefore when ever dealing with audio stego it is always worth analyzing the spectrogram of the audio. To do this task we will be using Sonic Visualizer."),(0,i.kt)("p",null,"Note: This introduction will be done using the included wav1 file."),(0,i.kt)("p",null,"When you open Sonic Visualizer you should see this screen:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://i.imgur.com/CKHI4le.png",alt:null})),(0,i.kt)("p",null,"From there click File->Open and then select the included wav1 file and you should see a screen similar to this:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://i.imgur.com/8TexIob.png",alt:null})),(0,i.kt)("p",null,"From there click Layer->Add Spectrogram and you should see this:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://i.imgur.com/wHSr0NM.png",alt:null})),(0,i.kt)("p",null,"And that's it!"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"What is the hidden text in the included wav2 file?")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Google")),(0,i.kt)("h2",{id:"the-final-exam"},"The Final Exam"),(0,i.kt)("p",null,"Good luck and have fun!"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"What is key 1?")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"stegoveritas -exif exam1.jpeg\nRunning Module: SVImage\n+------------------+------+\n|   Image Format   | Mode |\n+------------------+------+\n| JPEG (ISO 10918) | RGB  |\n+------------------+------+\nRunning Module: MultiHandler\n\nExif\n====\n+---------------------+-----------------------------------------------------------------+\n| key                 | value                                                           |\n+---------------------+-----------------------------------------------------------------+\n| SourceFile          | /home/kali/Downloads/ctf/tryhackme/CC: Steganography/exam1.jpeg |\n| ExifToolVersion     | 12.06                                                           |\n| FileName            | exam1.jpeg                                                      |\n| Directory           | /home/kali/Downloads/ctf/tryhackme/CC: Steganography            |\n| FileSize            | 8.6 kB                                                          |\n| FileModifyDate      | 2020:09:27 15:42:16+02:00                                       |\n| FileAccessDate      | 2020:09:27 15:42:23+02:00                                       |\n| FileInodeChangeDate | 2020:09:27 15:42:16+02:00                                       |\n| FilePermissions     | rw-r--r--                                                       |\n| FileType            | JPEG                                                            |\n| FileTypeExtension   | jpg                                                             |\n| MIMEType            | image/jpeg                                                      |\n| JFIFVersion         | 1.01                                                            |\n| ExifByteOrder       | Big-endian (Motorola, MM)                                       |\n| DocumentName        | password=admin                                                  |\n| XResolution         | 1                                                               |\n| YResolution         | 1                                                               |\n| ResolutionUnit      | None                                                            |\n| YCbCrPositioning    | Centered                                                        |\n| ImageWidth          | 213                                                             |\n| ImageHeight         | 160                                                             |\n| EncodingProcess     | Baseline DCT, Huffman coding                                    |\n| BitsPerSample       | 8                                                               |\n| ColorComponents     | 3                                                               |\n| YCbCrSubSampling    | YCbCr4:2:0 (2 2)                                                |\n| ImageSize           | 213x160                                                         |\n| Megapixels          | 0.034                                                           |\n+---------------------+-----------------------------------------------------------------+\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"password=admin")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'steghide extract -sf exam1.jpeg -p "admin"\nthe file "a.txt" does already exist. overwrite ? (y/n) y\nwrote extracted data to "a.txt".\n\nkali@kali:~/Downloads/ctf/tryhackme/CC: Steganography$ cat a.txt\nthe key is: superkeykey\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"superkeykey")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"What is key 2?")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"https://imgur.com/KTrtNl5")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'zsteg exam2.png -s all\nimagedata           .. text: ")))xxxLMO"\nb1,bgr,lsb,xy       .. text: "\\rKey: fatality"\nb2,rgb,lsb,xy       .. file: SoftQuad DESC or font file binary\nb2,rgb,msb,xy       .. file: VISX image file\nb2,bgr,lsb,xy       .. file: SoftQuad DESC or font file binary\nb2,bgr,msb,xy       .. file: VISX image file\n')),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"What is key 3?")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"http://key=killshot")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"killshot")))}c.isMDXComponent=!0}}]);