"use strict";(self.webpackChunkcyfun_me=self.webpackChunkcyfun_me||[]).push([[1412],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},50051:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={},i="Scripting",s={unversionedId:"Tryhackme/Scripting/Scripting",id:"Tryhackme/Scripting/Scripting",title:"Scripting",description:"Learn basic scripting by solving some challenges!",source:"@site/writeups/Tryhackme/Scripting/Scripting.md",sourceDirName:"Tryhackme/Scripting",slug:"/Tryhackme/Scripting/",permalink:"/writeups/Tryhackme/Scripting/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SSRF",permalink:"/writeups/Tryhackme/SSRF/"},next:{title:"Set",permalink:"/writeups/Tryhackme/Set/"}},l={},p=[{value:"\ud83d\udca2 We will cover  the topics",id:"-we-will-cover--the-topics",level:2},{value:"Task 1 Easy Base64",id:"task-1-easy-base64",level:2},{value:"Task 2 Medium Gotta Catch em All",id:"task-2-medium-gotta-catch-em-all",level:2},{value:"Task 3 Hard Encrypted Server Chit Chat",id:"task-3-hard-encrypted-server-chit-chat",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"scripting"},"Scripting"),(0,o.kt)("p",null,"Learn basic scripting by solving some challenges!"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://tryhackme.com/room/scripting"},"Scripting")),(0,o.kt)("h2",{id:"-we-will-cover--the-topics"},"\ud83d\udca2 We will cover  the topics"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Coding Python"),(0,o.kt)("li",{parentName:"ul"},"Python Scripting")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"task-1-easy-base64"},"Task 1 ","[Easy]"," Base64"),(0,o.kt)("p",null,"This file has been base64 encoded 50 times - write a script to retrieve the flag. Here is the general process to do this:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"read input from the file"),(0,o.kt)("li",{parentName:"ol"},"use function to decode the file"),(0,o.kt)("li",{parentName:"ol"},"do process in a loop")),(0,o.kt)("p",null,"Try do this in both Bash and Python!"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"What is the final string?")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"import base64\n\n#Open file\nwith open('b64.txt') as f:\n    msg = f.read()\n\n#Decode 50 times\nfor _ in range(50):\n    msg = base64.b64decode(msg)\n\nprint(f\"The flag is: {msg.decode('utf8')}\")\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kali@kali:~/CTFs/tryhackme/Scripting$ python3 task_1_1.py\nThe flag is: HackBack2019=\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"HackBack2019=")),(0,o.kt)("h2",{id:"task-2-medium-gotta-catch-em-all"},"Task 2 ","[Medium]"," Gotta Catch em All"),(0,o.kt)("p",null,"You need to write a script that connects to this webserver on the correct port, do an operation on a number and then move onto the next port. Start your original number at 0."),(0,o.kt)("p",null,"The format is: operation, number, next port."),(0,o.kt)("p",null,"For example the website might display, ",(0,o.kt)("strong",{parentName:"p"},"add 900 3212")," which would be: add 900 and move onto port 3212."),(0,o.kt)("p",null,"Then if it was ",(0,o.kt)("strong",{parentName:"p"},"minus 212 3499"),", you'd minus 212 (from the previous number which was 900) and move onto the next port 3499"),(0,o.kt)("p",null,"Do this until you the page response is STOP (or you hit port 9765)."),(0,o.kt)("p",null,"Each port is also only live for 4 seconds. After that it goes to the next port. You might have to wait until port 1337 becomes live again..."),(0,o.kt)("p",null,"Go to: http://<machines_ip>:3010 to start..."),(0,o.kt)("p",null,"General Approach(it's best to do this using the sockets library in Python):"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a socket in Python using the ",(0,o.kt)("a",{parentName:"li",href:"https://docs.python.org/3/howto/sockets.html"},"sockets")," library"),(0,o.kt)("li",{parentName:"ol"},"Connect to the port"),(0,o.kt)("li",{parentName:"ol"},"Send an operation"),(0,o.kt)("li",{parentName:"ol"},"View response and continue")),(0,o.kt)("hr",null),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Once you have done all operations, what number do you get (rounded to 2 decimal places at the end of your calculation)?")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"http://10.10.62.16:3010/"},"http://10.10.62.16:3010/")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"import socket\nimport time\nimport re\nimport sys\n\ndef Main():\n    serverIP = sys.argv[1] #Get ip from user input\n    serverPort = 1337\n    oldNum = 0 #Start at 0 as per instruction\n\n    while serverPort != 9765:\n        try: #try until port 1337 available\n            if serverPort == 1337:\n                print(f\"Connecting to {serverIP} waiting for port {serverPort} to become available...\")\n\n            #Create socket and connect to server\n            s = socket.socket()\n            s.connect((serverIP,serverPort))\n\n            #Send get request to server\n            gRequest = f\"GET / HTTP/1.0\\r\\nHost: {serverIP}:{serverPort}\\r\\n\\r\\n\"\n            s.send(gRequest.encode('utf8'))\n\n            #Retrieve data from get request\n            while True:\n                response = s.recv(1024)\n                if (len(response) < 1):\n                    break\n                data = response.decode(\"utf8\")\n\n            #Format and assign the data into usable variables\n            op, newNum, nextPort = assignData(data)\n            #Perform given calculations\n            oldNum = doMath(op, oldNum, newNum)\n            #Display output and move on\n            print(f\"Current number is {oldNum}, moving onto port {nextPort}\")\n            serverPort = nextPort\n\n            s.close()\n\n        except:\n            s.close()\n            time.sleep(3) #Ports update every 4 sec\n            pass\n\n    print(f\"The final answer is {round(oldNum,2)}\")\n\ndef doMath(op, oldNum, newNum):\n    if op == 'add':\n        return oldNum + newNum\n    elif op == 'minus':\n        return oldNum - newNum\n    elif op == 'divide':\n        return oldNum / newNum\n    elif op == 'multiply':\n        return oldNum * newNum\n    else:\n        return None\n\ndef assignData(data):\n    dataArr = re.split(' |\\*|\\n', data) #Split data with multi delim\n    dataArr = list(filter(None, dataArr)) #Filter null strings\n    #Assign the last 3 values of the data\n    op = dataArr[-3]\n    newNum = float(dataArr[-2])\n    nextPort = int(dataArr[-1])\n\n    return op, newNum, nextPort\n\nif __name__ == '__main__':\n    Main()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kali@kali:~/CTFs/tryhackme/Scripting$ python3 task_2_1.py 10.10.75.15\nConnecting to 10.10.75.15 waiting for port 1337 to become available...\nConnecting to 10.10.75.15 waiting for port 1337 to become available...\nConnecting to 10.10.75.15 waiting for port 1337 to become available...\nCurrent number is 900.0, moving onto port 23456\nCurrent number is 898.0, moving onto port 8888\nCurrent number is 3592.0, moving onto port 9823\nCurrent number is 1796.0, moving onto port 9887\nCurrent number is 2252.0, moving onto port 7823\nCurrent number is 2209.0, moving onto port 10456\nCurrent number is 4418.0, moving onto port 10457\nCurrent number is 5295.0, moving onto port 40000\nCurrent number is 5304.0, moving onto port 40200\nCurrent number is 180336.0, moving onto port 8743\nCurrent number is 180331.0, moving onto port 63890\nCurrent number is 180331.0, moving onto port 38721\nCurrent number is 180374.0, moving onto port 6632\nCurrent number is 180352.0, moving onto port 29932\nCurrent number is 60117.333333333336, moving onto port 29132\nCurrent number is 541056.0, moving onto port 8773\nCurrent number is 539856.0, moving onto port 1338\nCurrent number is 539868.0, moving onto port 1876\nCurrent number is 539868.0, moving onto port 34232\nCurrent number is 539868.0, moving onto port 6783\nCurrent number is 539768.0, moving onto port 4040\nCurrent number is -1079536.0, moving onto port 5050\nCurrent number is -1079236.0, moving onto port 9898\nCurrent number is -107923.6, moving onto port 3232\nCurrent number is -107933.6, moving onto port 10321\nCurrent number is -107803.6, moving onto port 7709\nCurrent number is -431214.4, moving onto port 9872\nCurrent number is 5174572.800000001, moving onto port 32424\nCurrent number is 1724857.6000000003, moving onto port 65513\nCurrent number is 1723857.6000000003, moving onto port 3459\nCurrent number is 1723880.6000000003, moving onto port 7832\nCurrent number is 344776.12000000005, moving onto port 1111\nCurrent number is 344768.12000000005, moving onto port 2222\nCurrent number is 344769.12000000005, moving onto port 9765\nThe final answer is 344769.12\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"344769.12")),(0,o.kt)("h2",{id:"task-3-hard-encrypted-server-chit-chat"},"Task 3 ","[Hard]"," Encrypted Server Chit Chat"),(0,o.kt)("p",null,'The VM you have to connect to has a UDP server running on port 4000. Once connected to this UDP server, send a UDP message with the payload "hello" to receive more information. You will find some sort of encryption(using the AES-GCM cipher). Using the information from the server, write a script to retrieve the flag. Here are some useful thingsto keep in mind:'),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"sending and receiving data over a network is done in bytes"),(0,o.kt)("li",{parentName:"ol"},"the PyCA encryption library and functions takes its inputs as bytes"),(0,o.kt)("li",{parentName:"ol"},"AES GCM sends both encrypted plaintext and tag, and the server sends these values sequentially in the form of the encrypted plaintext followed by the tag")),(0,o.kt)("p",null,"This machine may take up to 5 minutes to configure once deployed. Please be patient."),(0,o.kt)("p",null,"Use this general approach(use Python3 here as well):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use the Python sockets library to create a UDP socket and send the aforementioned packets to the server"),(0,o.kt)("li",{parentName:"ul"},"use the PyCA encyption library and follow the instructions from the server")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"What is the flag?")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'import socket\nimport hashlib\nimport sys\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import (\n    Cipher, algorithms, modes\n)\n\ndef Main():\n    host = sys.argv[1] #Get ip from user input\n    port = 4000\n    server = (host, port)\n    iv = b\'secureivl337\' #Hardcoded for ease\n    key = b\'thisisaverysecretkeyl337\'\n\n    #Create socket *No need to connect as using UDP\n    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n    #Get initial message\n    s.sendto(b"hello", server)\n    print(recv(s))\n    #Get the rest of the information\n    s.sendto(b"ready", server)\n    data = recv(s)\n    print(data)\n    checksum = data[104:136].hex() #Convert to hex to make comparison easier\n\n    #Loop flags until checksums match\n    while True:\n        #Get the cipher text\n        s.sendto(b"final", server)\n        cText = bytes(recv(s))\n        #Get the tag\n        s.sendto(b"final", server)\n        tag = bytes(recv(s))\n        #Decrypt\n        pText = decrypt(key, iv, cText, tag)\n        #Compare\n        if hashlib.sha256(pText).hexdigest() != checksum:\n            continue\n        else:\n            print(f"The flag is: {pText}")\n            break\n\ndef recv(s):\n    try:\n        data = s.recv(1024)\n        return data\n    except Exception as e:\n        print(str(e))\n\ndef decrypt(key, iv, cText, tag):\n    #Create AES GCM decryptor object\n    decryptor = Cipher(algorithms.AES(key), modes.GCM(iv, tag),\n    backend = default_backend()).decryptor()\n    #Return decrypted text\n    return decryptor.update(cText) + decryptor.finalize()\n\nif __name__ == \'__main__\':\n    Main()\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kali@kali:~/CTFs/tryhackme/Scripting$ python3 task_3.py 10.10.54.108\nb\"You've connected to the super secret server, send a packet with the payload ready to receive more information\"\nb\"key:thisisaverysecretkeyl337 iv:secureivl337 to decrypt and find the flag that has a SHA256 checksum of ]w\\xf0\\x18\\xd2\\xbfwx`T\\x86U\\xd8Ms\\x82\\xdc'\\xd6\\xce\\x81n\\xdeh\\xf6]rb\\x14c\\xd9\\xda send final in the next payload to receive all the encrypted flags\"\nThe flag is: b'THM{eW-sCrIpTiNg-AnD-cRyPtO}'\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"THM{eW-sCrIpTiNg-AnD-cRyPtO}")))}m.isMDXComponent=!0}}]);